{"version":3,"sources":["gql/queries.tsx","gql/mutations.tsx","components/EditProjectModal.tsx","components/AddProjectModal.tsx","components/UserModal.tsx","App.tsx","index.tsx"],"names":["GET_ENTERPRISES","gql","GET_PROJECT","GET_PROJECTS","GET_USERS","GET_USERS_BY_PROJECT","UPDATE_PROJECT","CREATE_PROJECT","REMOVE_PROJECT","UPDATE_USER","Text","Typography","Option","Select","EditProjectModal","props","useState","selectedProjectName","setSelectedProjectName","selectedEnterpriseId","setSelectedEnterpriseId","selectedProjectId","isEditProjectModalVisible","setIsEditProjectModalVisible","useQuery","enterprisesLoading","loading","enterprisesError","error","enterprisesData","data","variables","id","onCompleted","Project","name","Enterprise","projectLoading","projectError","projectData","useMutation","editProject","projectEditLoading","projectEditError","handleEditProject","enterprise_id","refetchQueries","query","className","title","visible","onOk","onCancel","footer","disabled","type","onClick","strong","defaultValue","onChange","e","target","value","showSearch","optionFilterProp","filterOption","input","option","children","toLowerCase","indexOf","allEnterprises","map","enterprise","AddProjectModal","isAddProjectModalVisible","setIsAddProjectModalVisible","update","cache","createProject","modify","fields","allProjects","existingProjects","newProjectRef","writeFragment","fragment","addProject","projectCreateLoading","projectCreateError","handleAddProject","Date","now","placeholder","AutoComplete","UserModal","hoveredItemIndex","setHoveredItemIndex","isSearchBarVisible","setIsSearchBarVisible","searchResult","setSearchResult","isUserModalVisible","setIsUserModalVisible","projectUsersLoading","projectUsersError","projectUsersData","usersLoading","usersError","usersData","updateUser","allowClear","autoFocus","res","allUsers","collobratingUsersIds","Users","user","filter","includes","availableUsers","first_name","last_name","email","some","element","toUpperCase","onSelect","_value","key","project_id","itemLayout","dataSource","renderItem","item","index","Item","onMouseEnter","onMouseLeave","actions","href","userId","Meta","avatar","src","description","App","setselectedProjectId","projectsLoading","projectsError","projectsData","errorPolicy","removeProject","header","PlusOutlined","UserSwitchOutlined","projectId","EditOutlined","DeleteOutlined","newProjects","readQuery","project","writeQuery","length","InMemoryCache","typePolicies","Query","merge","existing","incoming","client","ApolloClient","uri","process","REACT_APP_GQL_API","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b18aba6.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const GET_ENTERPRISES = gql`\r\n  query {\r\n    allEnterprises {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_PROJECT = gql`\r\n  query($id: ID!) {\r\n    Project(id: $id) {\r\n      id\r\n      name\r\n      Enterprise {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_PROJECTS = gql`\r\n  query {\r\n    allProjects {\r\n      id\r\n      name\r\n      Users {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_USERS = gql`\r\n  query {\r\n    allUsers {\r\n      id\r\n      email\r\n      first_name\r\n      last_name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_USERS_BY_PROJECT = gql`\r\n  query($id: ID!) {\r\n    Project(id: $id) {\r\n      Users {\r\n        id\r\n        first_name\r\n        last_name\r\n        avatar\r\n        email\r\n        project_id\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const UPDATE_PROJECT = gql`\r\n  mutation($id: ID!, $name: String, $enterprise_id: ID) {\r\n    updateProject(id: $id, name: $name, enterprise_id: $enterprise_id) {\r\n      id\r\n      name\r\n      enterprise_id\r\n      Enterprise {\r\n        id\r\n        name\r\n      }\r\n      Users {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_PROJECT = gql`\r\n  mutation($id: ID!, $name: String!, $enterprise_id: ID!) {\r\n    createProject(id: $id, name: $name, enterprise_id: $enterprise_id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_PROJECT = gql`\r\n  mutation($id: ID!) {\r\n    removeProject(id: $id)\r\n  }\r\n`;\r\n\r\nexport const UPDATE_USER = gql`\r\n  mutation($id: ID!, $project_id: ID) {\r\n    updateUser(id: $id, project_id: $project_id) {\r\n      id\r\n      project_id\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport {\r\n  GET_ENTERPRISES,\r\n  GET_PROJECT,\r\n  UPDATE_PROJECT,\r\n  GET_PROJECTS,\r\n} from '../gql';\r\nimport { Modal, Button, Input, Select, Typography } from 'antd';\r\nimport {\r\n  OncompletedProject,\r\n  EditProjectModalProps,\r\n  Enterprise,\r\n} from '../types';\r\nimport './ModalStyles.css';\r\nconst { Text } = Typography;\r\nconst { Option } = Select;\r\n\r\nexport function EditProjectModal(props: EditProjectModalProps) {\r\n  const [selectedProjectName, setSelectedProjectName] = useState<string>('');\r\n  const [selectedEnterpriseId, setSelectedEnterpriseId] = useState<string>('');\r\n\r\n  const {\r\n    selectedProjectId,\r\n    isEditProjectModalVisible,\r\n    setIsEditProjectModalVisible,\r\n  } = props;\r\n\r\n  // gql api hooks\r\n  const {\r\n    loading: enterprisesLoading,\r\n    error: enterprisesError,\r\n    data: enterprisesData,\r\n  } = useQuery(GET_ENTERPRISES);\r\n  const {\r\n    loading: projectLoading,\r\n    error: projectError,\r\n    data: projectData,\r\n  } = useQuery(GET_PROJECT, {\r\n    variables: { id: selectedProjectId },\r\n    onCompleted: (data: OncompletedProject) => {\r\n      setSelectedProjectName(data.Project.name);\r\n      setSelectedEnterpriseId(data.Project.Enterprise.id);\r\n    },\r\n  });\r\n  const [\r\n    editProject,\r\n    { loading: projectEditLoading, error: projectEditError },\r\n  ] = useMutation(UPDATE_PROJECT);\r\n\r\n  // making sure fetched data is ready\r\n  if (enterprisesLoading || projectLoading || projectEditLoading) return null;\r\n  if (enterprisesError || projectError || projectEditError) return <p>Error</p>;\r\n\r\n  // component logic functions\r\n  function onEnterpriseChange(value: string) {\r\n    setSelectedEnterpriseId(value);\r\n  }\r\n  function handleEditProject() {\r\n    editProject({\r\n      variables: {\r\n        id: selectedProjectId,\r\n        name: selectedProjectName,\r\n        enterprise_id: selectedEnterpriseId,\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: GET_PROJECTS,\r\n        },\r\n      ],\r\n    });\r\n    setIsEditProjectModalVisible(false);\r\n  }\r\n  function cancelEditProject() {\r\n    setIsEditProjectModalVisible(false);\r\n  }\r\n\r\n  // if (selectedProjectName !== '') {\r\n  if (projectData)\r\n    return (\r\n      <div className=\"EditProjectModal\">\r\n        <Modal\r\n          className={'Modal'}\r\n          title={`Edit ${selectedProjectName}`}\r\n          visible={isEditProjectModalVisible}\r\n          onOk={handleEditProject}\r\n          onCancel={cancelEditProject}\r\n          footer={\r\n            <Button\r\n              disabled={\r\n                selectedProjectName === '' || selectedEnterpriseId === ''\r\n              }\r\n              key=\"submit\"\r\n              type=\"primary\"\r\n              onClick={handleEditProject}\r\n            >\r\n              Edit Project\r\n            </Button>\r\n          }\r\n        >\r\n          <div className={'formContainer'}>\r\n            <Text id=\"projectTitle\" strong>\r\n              Project's name\r\n            </Text>\r\n\r\n            <Input\r\n              defaultValue={projectData.Project.name}\r\n              onChange={(e: any) => setSelectedProjectName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className={'formContainer'}>\r\n            <Text id=\"enterpriseTitle\" strong>\r\n              Enterprise\r\n            </Text>\r\n\r\n            <Select\r\n              value={selectedEnterpriseId}\r\n              showSearch\r\n              optionFilterProp=\"children\"\r\n              onChange={onEnterpriseChange}\r\n              filterOption={(input, option: any) =>\r\n                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n              }\r\n            >\r\n              {enterprisesData.allEnterprises.map((enterprise: Enterprise) => (\r\n                <Option value={enterprise.id} key={enterprise.id}>\r\n                  {enterprise.name}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  else return null;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useQuery, useMutation, gql } from '@apollo/client';\r\nimport { Modal, Button, Input, Select, Typography } from 'antd';\r\nimport { GET_ENTERPRISES, CREATE_PROJECT } from '../gql';\r\nimport { Enterprise, AddProjectModalProps } from '../types';\r\nimport './ModalStyles.css';\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nexport function AddProjectModal(props: AddProjectModalProps) {\r\n  const [selectedProjectName, setSelectedProjectName] = useState<string>('');\r\n  const [selectedEnterpriseId, setSelectedEnterpriseId] = useState<string>('');\r\n\r\n  const { isAddProjectModalVisible, setIsAddProjectModalVisible } = props;\r\n\r\n  // gql api hooks\r\n  const {\r\n    loading: enterprisesLoading,\r\n    error: enterprisesError,\r\n    data: enterprisesData,\r\n  } = useQuery(GET_ENTERPRISES);\r\n  const [\r\n    addProject,\r\n    { loading: projectCreateLoading, error: projectCreateError },\r\n  ] = useMutation(CREATE_PROJECT, {\r\n    // updating cache instead of having to refetch\r\n    update(cache, { data: { createProject } }) {\r\n      cache.modify({\r\n        fields: {\r\n          allProjects(existingProjects = []) {\r\n            const newProjectRef = cache.writeFragment({\r\n              data: createProject,\r\n              fragment: gql`\r\n                fragment NewProject on Project {\r\n                  id\r\n                }\r\n              `,\r\n            });\r\n            return [...existingProjects, newProjectRef];\r\n          },\r\n        },\r\n      });\r\n    },\r\n  });\r\n\r\n  if (enterprisesLoading || projectCreateLoading) return null;\r\n  if (enterprisesError || projectCreateError) return <p>Error</p>;\r\n\r\n  // component logic functions\r\n  function onEnterpriseChange(value: string) {\r\n    setSelectedEnterpriseId(value);\r\n  }\r\n  function handleAddProject() {\r\n    addProject({\r\n      variables: {\r\n        // mocking a unique id\r\n        id: Date.now(),\r\n        name: selectedProjectName,\r\n        enterprise_id: selectedEnterpriseId,\r\n      },\r\n    });\r\n    setIsAddProjectModalVisible(false);\r\n  }\r\n  function handleCancel() {\r\n    setIsAddProjectModalVisible(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"AddProjectModal\">\r\n      <Modal\r\n        className={'Modal'}\r\n        title=\"Add Project\"\r\n        visible={isAddProjectModalVisible}\r\n        onOk={handleAddProject}\r\n        onCancel={handleCancel}\r\n        footer={\r\n          <Button\r\n            disabled={selectedProjectName === '' || selectedEnterpriseId === ''}\r\n            key=\"submit\"\r\n            type=\"primary\"\r\n            onClick={handleAddProject}\r\n          >\r\n            Add Project\r\n          </Button>\r\n        }\r\n      >\r\n        <div className={'formContainer'}>\r\n          <Text id=\"projectTitle\" strong>\r\n            Project's name\r\n          </Text>\r\n          <Input\r\n            className={'projectInputBox'}\r\n            placeholder=\"e.g: Spotify\"\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n              setSelectedProjectName(e.target.value);\r\n            }}\r\n          />\r\n        </div>\r\n        <div className={'formContainer'}>\r\n          <Text id=\"enterpriseTitle\" strong>\r\n            Enterprise\r\n          </Text>\r\n          <Select\r\n            showSearch\r\n            placeholder={'Quop'}\r\n            optionFilterProp=\"children\"\r\n            onChange={onEnterpriseChange}\r\n            filterOption={(input, option: any) =>\r\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            }\r\n          >\r\n            {enterprisesData.allEnterprises.map((enterprise: Enterprise) => {\r\n              return (\r\n                <Option value={enterprise.id} key={enterprise.id}>\r\n                  {enterprise.name}\r\n                </Option>\r\n              );\r\n            })}\r\n          </Select>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { AutoComplete, Modal, List, Avatar } from 'antd';\r\nimport {\r\n  GET_USERS,\r\n  GET_USERS_BY_PROJECT,\r\n  UPDATE_USER,\r\n  GET_PROJECTS,\r\n} from '../gql/';\r\nimport { UserModalProps, User } from '../types';\r\nimport './ModalStyles.css';\r\nconst { Option } = AutoComplete;\r\n\r\nexport function UserModal(props: UserModalProps) {\r\n  const [hoveredItemIndex, setHoveredItemIndex] = useState<string | null>(null);\r\n  const [isSearchBarVisible, setIsSearchBarVisible] = useState<boolean>(false);\r\n  const [searchResult, setSearchResult] = useState<string[]>([]);\r\n\r\n  const { isUserModalVisible, setIsUserModalVisible } = props;\r\n\r\n  // gql api hooks\r\n  const {\r\n    loading: projectUsersLoading,\r\n    error: projectUsersError,\r\n    data: projectUsersData,\r\n  } = useQuery(GET_USERS_BY_PROJECT, {\r\n    variables: { id: props.selectedProjectId },\r\n  });\r\n  const {\r\n    loading: usersLoading,\r\n    error: usersError,\r\n    data: usersData,\r\n  } = useQuery(GET_USERS);\r\n  const [updateUser] = useMutation(UPDATE_USER, {\r\n    refetchQueries: [\r\n      {\r\n        query: GET_USERS_BY_PROJECT,\r\n        variables: { id: props.selectedProjectId },\r\n      },\r\n      {\r\n        query: GET_PROJECTS,\r\n      },\r\n    ],\r\n  });\r\n\r\n  // making sure fetched data is ready\r\n  if (projectUsersLoading || usersLoading) return null;\r\n  if (projectUsersError || usersError) return <p>Error</p>;\r\n\r\n  // component logic functions\r\n  const availableUsers = () => {\r\n    const { allUsers } = usersData;\r\n    const collobratingUsersIds = projectUsersData.Project.Users.map(\r\n      (user: User) => user.id\r\n    );\r\n    // eslint-disable-next-line array-callback-return\r\n    return allUsers.filter((user: User) => {\r\n      if (!collobratingUsersIds.includes(user.id)) return user;\r\n    });\r\n  };\r\n  function handleSearch(value: string) {\r\n    let res: string[] = [];\r\n    if (!value) {\r\n      res = [];\r\n    } else {\r\n      res = availableUsers().filter((user: User) => {\r\n        return [user.first_name, user.last_name, user.email].some(\r\n          (element: any) => {\r\n            return element.toUpperCase().includes(value.toUpperCase());\r\n          }\r\n        );\r\n      });\r\n    }\r\n    setSearchResult(res);\r\n  }\r\n\r\n  function removeUser(userId: string) {\r\n    updateUser({\r\n      variables: { id: userId, project_id: null },\r\n    });\r\n  }\r\n  function addUser(_value: string, option: any) {\r\n    updateUser({\r\n      variables: { id: option.key, project_id: props.selectedProjectId },\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"UserModal\">\r\n      <Modal\r\n        className={'Modal'}\r\n        title=\"Users settings\"\r\n        visible={isUserModalVisible}\r\n        onCancel={() => setIsUserModalVisible(false)}\r\n        footer={\r\n          isSearchBarVisible ? (\r\n            <AutoComplete\r\n              allowClear={true}\r\n              autoFocus={true}\r\n              className={'autoCompleteBox'}\r\n              onChange={handleSearch}\r\n              onSelect={addUser}\r\n              placeholder=\"ex: firstname.lastname@provider.com\"\r\n            >\r\n              {searchResult.map((user: any) => {\r\n                return (\r\n                  <Option\r\n                    key={user.id}\r\n                    value={`${user.first_name} ${user.last_name}`}\r\n                  >\r\n                    <div className={'searchOption'}>\r\n                      <p>{`${user.first_name} ${user.last_name}`}</p>\r\n                      <span>{user.email}</span>\r\n                    </div>\r\n                  </Option>\r\n                );\r\n              })}\r\n            </AutoComplete>\r\n          ) : (\r\n            <p\r\n              className={'inviteText'}\r\n              onClick={() => setIsSearchBarVisible(true)}\r\n            >\r\n              Invite new users\r\n            </p>\r\n          )\r\n        }\r\n      >\r\n        <List\r\n          itemLayout=\"horizontal\"\r\n          dataSource={projectUsersData.Project.Users}\r\n          renderItem={(item: User, index: any) => {\r\n            return (\r\n              <List.Item\r\n                onMouseEnter={() => setHoveredItemIndex(index)}\r\n                onMouseLeave={() => setHoveredItemIndex(null)}\r\n                actions={[\r\n                  hoveredItemIndex === index && (\r\n                    <a href=\"/#\" onClick={() => removeUser(item.id)}>\r\n                      Delete\r\n                    </a>\r\n                  ),\r\n                ]}\r\n              >\r\n                <List.Item.Meta\r\n                  avatar={<Avatar src={item.avatar} />}\r\n                  title={`${item.first_name} ${item.last_name}`}\r\n                  description={item.email}\r\n                />\r\n              </List.Item>\r\n            );\r\n          }}\r\n        />\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { List } from 'antd';\r\nimport {\r\n  UserSwitchOutlined,\r\n  EditOutlined,\r\n  DeleteOutlined,\r\n  PlusOutlined,\r\n} from '@ant-design/icons';\r\nimport { AddProjectModal, EditProjectModal, UserModal } from './components';\r\nimport { GET_PROJECTS, REMOVE_PROJECT } from './gql';\r\nimport './App.css';\r\nimport { Project } from './types';\r\n\r\nfunction App() {\r\n  const [selectedProjectId, setselectedProjectId] = useState<string>('');\r\n\r\n  // modal visibilty states\r\n  const [isAddProjectModalVisible, setIsAddProjectModalVisible] = useState(\r\n    false\r\n  );\r\n  const [isUserModalVisible, setIsUserModalVisible] = useState(false);\r\n  const [isEditProjectModalVisible, setIsEditProjectModalVisible] = useState(\r\n    false\r\n  );\r\n\r\n  // gql api hooks\r\n  const {\r\n    loading: projectsLoading,\r\n    error: projectsError,\r\n    data: projectsData,\r\n  } = useQuery(GET_PROJECTS);\r\n  const [removeProject] = useMutation(REMOVE_PROJECT, {\r\n    errorPolicy: 'ignore',\r\n  });\r\n\r\n  // making sure fetched data is ready\r\n  if (projectsLoading) return <p id=\"loading\">Loading...</p>;\r\n  if (projectsError) return <p>Error</p>;\r\n\r\n  // modal visibility functions\r\n  function showAddProjectModal() {\r\n    setIsAddProjectModalVisible(true);\r\n  }\r\n  function showUserModal(projectId: string) {\r\n    setselectedProjectId(projectId);\r\n    setIsUserModalVisible(true);\r\n  }\r\n  function showEditProjectModal(projectId: string) {\r\n    setselectedProjectId(projectId);\r\n    setIsEditProjectModalVisible(true);\r\n  }\r\n\r\n  // component logic functions\r\n  function handleRemoveProject(projectId: string) {\r\n    removeProject({\r\n      variables: {\r\n        id: projectId,\r\n      },\r\n      // updating cache instead of having to refetch\r\n      update: (cache) => {\r\n        const projects: any = cache.readQuery({\r\n          query: GET_PROJECTS,\r\n        });\r\n        const newProjects = projects.allProjects.filter(\r\n          (project: Project) => project.id !== projectId\r\n        );\r\n        cache.writeQuery({\r\n          query: GET_PROJECTS,\r\n          data: { allProjects: { newProjects } },\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {isAddProjectModalVisible && (\r\n        <AddProjectModal\r\n          isAddProjectModalVisible={isAddProjectModalVisible}\r\n          setIsAddProjectModalVisible={setIsAddProjectModalVisible}\r\n        />\r\n      )}\r\n      {isUserModalVisible && (\r\n        <UserModal\r\n          selectedProjectId={selectedProjectId}\r\n          isUserModalVisible={isUserModalVisible}\r\n          setIsUserModalVisible={setIsUserModalVisible}\r\n        />\r\n      )}\r\n      {isEditProjectModalVisible && (\r\n        <EditProjectModal\r\n          selectedProjectId={selectedProjectId}\r\n          isEditProjectModalVisible={isEditProjectModalVisible}\r\n          setIsEditProjectModalVisible={setIsEditProjectModalVisible}\r\n        />\r\n      )}\r\n      <div className={'WelcomeTextContainer'}>\r\n        <h1 className={'WelcomeText'}>Welcome to your projects board</h1>\r\n      </div>\r\n      <List\r\n        header={[\r\n          <div key={'header'} className={'Header'}>\r\n            <h2 className={'HeaderTitle'}>Projects</h2>\r\n            <PlusOutlined className={'Icon'} onClick={showAddProjectModal} />\r\n          </div>,\r\n        ]}\r\n        className=\"ProjectList\"\r\n        itemLayout=\"horizontal\"\r\n        dataSource={projectsData.allProjects}\r\n        renderItem={(item: Project) => {\r\n          return (\r\n            <List.Item\r\n              className={'ListItem'}\r\n              actions={[\r\n                <UserSwitchOutlined\r\n                  className={'Icon'}\r\n                  onClick={() => showUserModal(item.id)}\r\n                />,\r\n                <EditOutlined\r\n                  className={'Icon'}\r\n                  onClick={() => showEditProjectModal(item.id)}\r\n                />,\r\n                <DeleteOutlined\r\n                  id={'deleteButton'}\r\n                  className={'Icon'}\r\n                  onClick={() => handleRemoveProject(item.id)}\r\n                />,\r\n              ]}\r\n            >\r\n              <List.Item.Meta\r\n                className={'ListItem'}\r\n                title={<p className={'ProjectTitles'}>{item.name}</p>}\r\n                description={\r\n                  <p className={'ProjectDescriptions'}>\r\n                    {item.Users.length + ' collaborators'}\r\n                  </p>\r\n                }\r\n              />\r\n            </List.Item>\r\n          );\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\r\n\r\n// make sure cache is merged with incoming (fetched) changes\r\nconst cache = new InMemoryCache({\r\n  typePolicies: {\r\n    Query: {\r\n      fields: {\r\n        allProjects: {\r\n          merge(existing: any, incoming: any) {\r\n            return incoming;\r\n          },\r\n        },\r\n      },\r\n    },\r\n    Project: {\r\n      fields: {\r\n        Users: {\r\n          merge(existing: any, incoming: any) {\r\n            return incoming;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  uri:\r\n    process.env.REACT_APP_GQL_API ||\r\n    // -remote api-\r\n    // 'https://blooming-cliffs-33388.herokuapp.com/graphql',\r\n    'http://localhost:5000/graphql',\r\n  cache: cache,\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ApolloProvider client={client}>\r\n      <App />\r\n    </ApolloProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}